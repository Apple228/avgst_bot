import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from aiogram.utils.markdown import hcode

from keyboards.default import contact_buttons, menu, cancel
from loader import dp, db


@dp.message_handler(Command("username"))
async def change_username(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π username")
    await state.set_state("username")

@dp.message_handler(state="username")
async def enter_username(message: types.Message, state: FSMContext):
    await db.update_user_username(username=message.text, telegram_id=message.from_user.id)
    user = await db.select_user(telegram_id=message.from_user.id)
    user = dict(user)
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø–∏—Å—å –≤ –ë–î:\n" +
                         hcode(f"{user=}"))
    await state.reset_state()


@dp.message_handler(Command("email"))
async def update_user_email(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π email")
    await state.set_state("email")


@dp.message_handler(state="email")
async def enter_email(message: types.Message, state: FSMContext):
    await db.update_user_email(email=message.text, telegram_id=message.from_user.id)
    await state.reset_state()
    await message.answer("–¢–≤–æ–π email —Å–æ—Ö—Ä–∞–Ω—ë–Ω")


@dp.message_handler(Command("number"))
async def share_number(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}.\n"
                         f"–ø–µ—Ä–µ–¥–∞–π —Å–≤–æ–π –Ω–æ–º–µ—Ä, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                         reply_markup=contact_buttons.phone_number)


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    contact = message.contact
    phone_number = contact.phone_number
    await db.update_user_phone_number(phone_number=phone_number, telegram_id=message.from_user.id)
    # user = await db.select_user(id=message.from_user.id)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {contact.full_name}.\n"
                         f"–¢–≤–æ–π –Ω–æ–º–µ—Ä {contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω.\n"
                         f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /email",
                         reply_markup=menu)


@dp.message_handler(text="üì¢–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö")
async def ad(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=cancel)
    await state.set_state("ad")


@dp.message_handler(state="ad")
async def enter_ad(message: types.Message, state: FSMContext):
    users_id = await db.select_all_telegram_id()
    count = await db.count_users()
    for i in range(0, count):
        logging.info(users_id[i][0])
        await dp.bot.send_message(users_id[i][0], f"{message.from_user.full_name} –¥–µ–ª–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: \n"
                                                  f"{message.text}")
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∞–Ω–æ!", reply_markup=menu)
    await state.reset_state()

