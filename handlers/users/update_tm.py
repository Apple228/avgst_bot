import logging
import re
from aiogram import types
from aiogram.dispatcher import FSMContext

from aiogram.types import CallbackQuery

from keyboards.default import menu, cancel

from keyboards.inline.task_inline import task
from loader import dp, db, tm
from states import Id


# @dp.message_handler(text="üìä–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
# async def get_name(message: types.Message):
#     await message.answer("–ü—Ä–∏—à–ª–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞",
#                          reply_markup=cancel)
#     await Id.name_id.set()


@dp.message_handler(state=Id.name_id)
async def search_name(message: types.Message, state: FSMContext):
    name = message.text
    names = await db.select_full_name_id()  # SELECT full_name, telegram_id FROM Users
    user_data = list(names)
    count = await db.count_users()
    for i in range(0, count):
        if name == user_data[i][0]:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
            id_for = user_data[i][1]
            await state.update_data(id_for=id_for,
                                    name=user_data[i][0],
                                    reply_markup=cancel)  # –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º, —Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç –∏ –∏–¥—ë–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
            await Id.next()
            break
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ",
                             reply_markup=menu)  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–π—Ç, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        await state.reset_state()


@dp.message_handler(state=Id.id)
async def insert_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    id_for = int(data.get("id_for"))

    task_for = data.get("name")

    await tm.add_task(task_for=task_for, task_for_telegram_id=id_for, task_from_telegram_id=message.from_user.id,
                      task_from=message.from_user.full_name, text_tasks=message.text, status="–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
    id_task = await tm.select_id()  # –ø–æ–ª—É—á–∞–µ–º id —É –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏)))

    await dp.bot.send_message(id_for, f"{id_task[0]}.–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {message.text}\n"
                                      f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:{message.from_user.full_name}", reply_markup=task)

    await message.answer("–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞", reply_markup=menu)
    await state.reset_state()


@dp.callback_query_handler(text="completed")
async def task_completed(call: CallbackQuery, state: FSMContext):
    # –û—Ç–≤–µ—Ç–∏–º –≤ –æ–∫–æ—à–∫–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º!
    await call.answer("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É", show_alert=True)
    text_message = call.message.text  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    num = re.findall(r'\d+', text_message)
    num = [int(i) for i in num]
    task = await tm.task_for_user(id=num[0])  # task_for, task_from, task_from_telegram_id, text_task

    await tm.update_status(status="–í—ã–ø–æ–ª–Ω–µ–Ω–∞‚úÖ", id=num[0])
    await call.message.edit_text(f"–ó–∞–¥–∞—á–∞:{task[3]} –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ‚úÖ‚úÖ")
    await dp.bot.send_message(task[2], f"{task[0]} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞–¥–∞—áy: \n"
                                       f"{task[3]} \n"
                                       f" ‚úÖ‚úÖ‚úÖ")
    # –í–∞—Ä–∏–∞–Ω—Ç 1 - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ–µ —É–±—Ä–∞—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è!
    await call.message.edit_reply_markup(reply_markup=None)

    # await state.update_data(task_for=task[0], task_from=task[1],
    #                         task_from_telegram_id=task[2], text_task=task[3])


@dp.callback_query_handler(text="not_completed")
async def task_not_completed(call: CallbackQuery):
    # –û—Ç–≤–µ—Ç–∏–º –≤ –æ–∫–æ—à–∫–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º!
    await call.answer("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É", show_alert=True)
    text_message = call.message.text  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ–≥–æ –ø–æ—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ç–∞—Å–∫–∏
    num = re.findall(r'\d+', text_message)
    num = [int(i) for i in num]
    task = await tm.task_for_user(id=num[0])  # task_for, task_from, task_from_telegram_id, text_tasks
    await tm.update_status(status="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞‚ùå", id=num[0])
    await call.message.edit_text(f"–ó–∞–¥–∞—á–∞:{task[3]} –±—ã–ª–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚ùå‚ùå‚ùå")
    await dp.bot.send_message(task[2], f"{task[0]} –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞–¥–∞—áy: \n"
                                       f"{task[3]} \n"
                                       f"‚ùå‚ùå‚ùå")
    # –í–∞—Ä–∏–∞–Ω—Ç 1 - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ–µ —É–±—Ä–∞—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è!
    await call.message.edit_reply_markup(reply_markup=None)


@dp.message_handler(text="üì•–í—Ö–æ–¥—è—â–∏–µ")
async def get_task_for_user(message: types.Message):
    tasks = await tm.tasks_for_user(
        task_for_telegram_id=message.from_user.id)  # id, task_for, task_from, text_tasks, status
    t = list(tasks)
    count = len(t)
    for i in range(count):
        await message.answer(f"{t[i][0]}.–î–ª—è:{t[i][1]} –û—Ç:{t[i][2]} \n"
                             f"–¢–µ–∫—Å—Ç: {t[i][3]}\n"
                             f"–°—Ç–∞—Ç—É—Å: {t[i][4]}", reply_markup=task)
    await message.answer(f"–í—Å–µ–≥–æ {count} –∑–∞–¥–∞—á" + (
        '' if count % 10 == 0 or 4 < count % 10 < 10 or 10 < count % 100 < 15 else '–∏'
        if 1 < count % 10 < 5 else '–∞'), reply_markup=menu)


@dp.message_handler(text="üì§–ò—Å—Ö–æ–¥—è—â–∏–µ")
async def get_task_for_user(message: types.Message):
    # id, task_for, task_from, text_tasks, status
    tasks = await tm.tasks_from_user(task_from_telegram_id=message.from_user.id)
    t = list(tasks)
    count = len(t)
    for i in range(count):
        await message.answer(f"{t[i][0]}.–î–ª—è:{t[i][1]} –û—Ç:{t[i][2]} \n"
                             f"–¢–µ–∫—Å—Ç: {t[i][3]}\n"
                             f"–°—Ç–∞—Ç—É—Å: {t[i][4]}", reply_markup=task)
    await message.answer(f"–í—Å–µ–≥–æ {count} –∑–∞–¥–∞—á" + (
        '' if count % 10 == 0 or 4 < count % 10 < 10 or 10 < count % 100 < 15 else '–∏'
        if 1 < count % 10 < 5 else '–∞'), reply_markup=menu)
