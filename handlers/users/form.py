import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardRemove

from data.config import PATH
from keyboards.default import menu
from keyboards.default.form_keyboards import location_keyboard, interesting_keyboard, target_keyboard, square_keyboard, \
    count_room_keyboard, equipment_keyboard, project_keyboard, budget_keyboard, payment_method_keyboard, \
    comment_keyboard, start_keyboard, planing_build_keyboard
from loader import dp
from google.oauth2.service_account import Credentials
import gspread_asyncio
def get_scoped_credentials(path: str):
    creds = Credentials.from_service_account_file(path)

    def prepare_scoped_credentials():
        return creds.with_scopes(
            ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
             "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
        )

    return prepare_scoped_credentials


async def create_spreadsheet(client, spreadsheet_name) -> gspread_asyncio.AsyncioGspreadSpreadsheet:
    spreadsheet = await client.create(spreadsheet_name)
    spreadsheet = await client.open_by_key(spreadsheet.id)
    return spreadsheet


async def add_worksheet(async_spreadsheet: gspread_asyncio.AsyncioGspreadSpreadsheet, worksheet_name):
    worksheet = await async_spreadsheet.add_worksheet(worksheet_name, 500, 500)
    worksheet = await async_spreadsheet.worksheet(worksheet.title)
    return worksheet


@dp.message_handler(text='üìù–ù–æ–≤—ã–π –ª–∏–¥')
async def bot_start(message: types.Message, state: FSMContext):
    await message.answer("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=ReplyKeyboardRemove())
    await state.set_state("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")




@dp.message_handler(state="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    if message.text == "/stop":
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–π –∏–Ω—Ñ—ã, —Ç–æ /cancel")
        await state.set_state("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    else:
        client_name = message.text
        await state.update_data(client_name=client_name)
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await state.set_state("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(state="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    if message.text == "/stop":
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ—ã, —Ç–æ /cancel")
        await state.set_state("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    else:
        client_phone_number = message.text
        await state.update_data(client_phone_number=client_phone_number)
        await message.answer("–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ? (–µ—Å–ª–∏ –Ω–µ –ú—Å–∫, —Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–≥–∏–æ–Ω)", reply_markup=location_keyboard)
        await state.set_state("–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?")

@dp.message_handler(Command("stop"), state='*')
@dp.message_handler(state="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    if message.text == "/stop":
        comment = ""
    else:
        comment = message.text
    await state.update_data(comment=comment)

    data = await state.get_data()
    today = datetime.date.today()

    await message.answer(f"1. {message.from_user.full_name}\n"
                         f"2. {today.strftime('%d.%m.%y')}\n"
                         f"3. {data.get('client_name')}\n"
                         f"4. {data.get('client_phone_number')}\n"
                         f"5. {data.get('client_location')}\n"
                         f"6. {data.get('client_interesting')}\n"
                         f"7. {data.get('planing_build')}\n"
                         f"8. {data.get('client_target')}\n"
                         f"9. {data.get('client_square')}\n"
                         f"10. {data.get('count_room')}\n"
                         f"11. {data.get('equipment')}\n"
                         f"12. {data.get('project')}\n"
                         f"13. {data.get('budget')}\n"
                         f"14. {data.get('payment_method')}\n"
                         f"15. {data.get('comment')}\n",
                         reply_markup=menu)
    await state.reset_state()
    spreadsheet_id = '1hocu-OWJdIDiTmy1WlteqprXhYPn7sIKkNUi8vdjXfQ'
    client = gspread_asyncio.AsyncioGspreadClientManager(get_scoped_credentials(PATH))  # –∏–º–ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    client = await client.authorize()
    async_spreadsheet = await client.open_by_key(spreadsheet_id)

    worksheet = await async_spreadsheet.worksheet('–û–ø—Ä–æ—Å–Ω–∏–∫ –≤—ã—Å—Ç–∞–≤–∫–∞ –ª–µ—Ç–æ 2023')
    values = [message.from_user.full_name, today.strftime('%d.%m.%y'), data.get('client_name'),
              data.get('client_phone_number'), data.get('client_location'),data.get('client_interesting'), data.get('planing_build'),
              data.get('client_target'), data.get('client_square'), data.get('count_room'),
              data.get('equipment'), data.get('project'), data.get('budget'), data.get('payment_method'),
              data.get('comment')]
    await worksheet.append_row(values)
@dp.message_handler(state="–ö–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    client_location = message.text
    await state.update_data(client_location=client_location)
    # await message.answer("–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=interesting_keyboard)
    # await state.set_state("–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    await message.answer("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–π–∫–∞?", reply_markup=planing_build_keyboard)
    await state.set_state("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–π–∫–∞?")

# @dp.message_handler(state="–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
# async def state_data_gsheets(message: types.Message, state: FSMContext):
#     client_interesting = message.text
#     await state.update_data(client_interesting=client_interesting)
#     await message.answer("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–π–∫–∞?", reply_markup=planing_build_keyboard)
#     await state.set_state("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–π–∫–∞?")

@dp.message_handler(state="–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—Ç—Ä–æ–π–∫–∞?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    planing_build = message.text
    await state.update_data(planing_build=planing_build)
    # await message.answer("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º?", reply_markup=target_keyboard)
    # await state.set_state("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º?")
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=comment_keyboard)
    await state.set_state("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")


@dp.message_handler(state="–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    client_target = message.text
    await state.update_data(client_target=client_target)
    await message.answer("–ü–ª–æ—â–∞–¥—å?", reply_markup=square_keyboard)
    await state.set_state("–ü–ª–æ—â–∞–¥—å?")


@dp.message_handler(state="–ü–ª–æ—â–∞–¥—å?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    client_square = message.text
    await state.update_data(client_square=client_square)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?", reply_markup=count_room_keyboard)
    await state.set_state("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?")

@dp.message_handler(state="–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    count_room = message.text
    await state.update_data(count_room=count_room)
    await message.answer("–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è?", reply_markup=equipment_keyboard)
    await state.set_state("–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è?")


@dp.message_handler(state="–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    equipment = message.text
    await state.update_data(equipment=equipment)
    await message.answer("–ü—Ä–æ–µ–∫—Ç?", reply_markup=project_keyboard)
    await state.set_state("–ü—Ä–æ–µ–∫—Ç?")


@dp.message_handler(state="–ü—Ä–æ–µ–∫—Ç?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    project = message.text
    await state.update_data(project=project)
    await message.answer("–ë—é–¥–∂–µ—Ç?", reply_markup=budget_keyboard)
    await state.set_state("–ë—é–¥–∂–µ—Ç?")

@dp.message_handler(state="–ë—é–¥–∂–µ—Ç?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    budget = message.text
    await state.update_data(budget=budget)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=comment_keyboard)
    await state.set_state("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    # await message.answer("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?", reply_markup=payment_method_keyboard)
    # await state.set_state("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?")


@dp.message_handler(state="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?")
async def state_data_gsheets(message: types.Message, state: FSMContext):
    payment_method = message.text
    await state.update_data(payment_method=payment_method)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=comment_keyboard)
    await state.set_state("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")


